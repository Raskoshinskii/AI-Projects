version: '3.7'

x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.3}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_AIRFLOW_USER}:${POSTGRES_AIRFLOW_PASSWORD}@${POSTGRES_AIRFLOW_SERVICE_NAME}/${POSTGRES_AIRFLOW_DB}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}
    AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
    AIRFLOW__API__AUTH_BACKENDS: ${AIRFLOW__API__AUTH_BACKENDS}
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: ${AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK}
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    POSTGRES_DB_USER: ${POSTGRES_DB_USER}
    POSTGRES_DB_PASSWORD: ${POSTGRES_DB_PASSWORD}
    POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
    POSTGRES_DB_CONTAINER_PORT: ${POSTGRES_DB_CONTAINER_PORT}
    TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
    VLAD_CHAT_ID: ${VLAD_CHAT_ID}
    ALEX_CHAT_ID: ${ALEX_CHAT_ID}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow_volume/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow_volume/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow_volume/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/airflow_volume/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/data_scraper:/opt/airflow/data_scraper
    - ${AIRFLOW_PROJ_DIR:-.}/telegram_bot:/opt/airflow/telegram_bot
    - ${AIRFLOW_PROJ_DIR:-.}/pyproject.toml:/opt/airflow/pyproject.toml
    - ${AIRFLOW_PROJ_DIR:-.}/README.md:/opt/airflow/README.md
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres-airflow:
      condition: service_healthy

services:
  postgres-airflow:
    image: postgres:13
    container_name: postgres_airflow
    environment: # setting up env variables from .env file for container
      POSTGRES_USER: ${POSTGRES_AIRFLOW_USER}
      POSTGRES_PASSWORD: ${POSTGRES_AIRFLOW_PASSWORD}
      POSTGRES_DB: ${POSTGRES_AIRFLOW_DB}
    volumes:
      - postgres-airflow-volume:/var/lib/postgresql/data  # mount the volume to store data from the container
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_AIRFLOW_USER}"] # command to healthcheck (i.e. postgres is ready)
      interval: 10s        # check every 10 seconds
      retries: 5           # mark as unhealthy after 5 attempts
      start_period: 5s     # wait 5 seconds before starting health checks
    restart: always        # always restart the container if it stops, regardless of the reason

  postgres-db:
      image: postgres:13
      container_name: postgres_db
      environment:
        POSTGRES_USER: ${POSTGRES_DB_USER}
        POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB_NAME}
      volumes:
        - postgres-db-volume:/var/lib/postgresql/data
      ports:
        - "${POSTGRES_DB_HOST_PORT}:${POSTGRES_DB_CONTAINER_PORT}"
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "${POSTGRES_DB_USER}"]
        interval: 10s
        retries: 5
        start_period: 5s
      restart: always
 
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: >
      bash -c "pip install /opt/airflow && airflow webserver"
    ports:
      - "${AIRFLOW_WEB_PORT}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on: # specifies the services that this service depends on (starts only when depending services are up and running)
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: >
      bash -c "pip install -e /opt/airflow && airflow scheduler"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow_trigger
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash # executes provided bash command
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_WWW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_WWW_USER_PASSWORD}
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS}
    user: "0:0" # runs the container as root user
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow_volume:/sources

  airflow-cli:
    <<: *airflow-common
    container_name: airflow_cli
    profiles: 
      - debug # specifies the profile to use for the container, typically for debugging purposes
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  pg_admin:
    image: dpage/pgadmin4
    container_name: pg_admin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    healthcheck:
      test:  ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s # healthcheck intervals
      retries: 3
      start_period: 10s
    ports:
      - "${PGADMIN_HOST_PORT}:80"
    # networks:
    #   - pg_admin
  
  # telegram_bot:
  #   image: telegram-bot
  #   container_name: telegram_bot
  #   environment:
  #     POSTGRES_DB_USER: ${POSTGRES_DB_USER}
  #     POSTGRES_DB_PASSWORD: ${POSTGRES_DB_PASSWORD}
  #     POSTGRES_DB_HOST_PORT: ${POSTGRES_DB_HOST_PORT}
  #     POSTGRES_DB_CONTAINER_PORT: ${POSTGRES_DB_CONTAINER_PORT}
  #     POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
  #     TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
  #   restart: always
  #   ports:
  #     - "${TELEGRAM_HOST_PORT}:90"
  #   depends_on:
  #     - postgres-db
  #   # networks:
  #   #   - pg_admin

volumes:
  postgres-db-volume:
    name: postgres_db_volume  
    driver: local
  postgres-airflow-volume:
    name: postgres_airflow_volume
    driver: local